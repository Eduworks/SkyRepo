//Copyright 2015 Eduworks Corporation and other contributing parties.
//Licensed under an Apache 2.0 License. See LICENSE in the root directory.

//Uses ElasticSearch as a backend.

type=#add(a="@",b="type");
context=#add(a="@",b="context");
owner=#add(a="@",b="owner");
signature=#add(a="@",b="signature");
id=#add(a="@",b="id");

urlBase=#urlBase();

putUrl=#add(
	a=urlBase,
	b="/data/",
	c="@type",
	d="/",
	g=#urlEncode(obj="@id"),
	h=#if(
		operator="@version",
		operand="",
		ne=#add(
			a="?version=",
			i="@version",
			j="&version_type=external&refresh=true"
		),
		eq="?refresh=true"
	),
	
);

//BUG: Check to see if there are no signature sheet signatures but the owners change, if it changes the owner.
put=#if(
	operator="@obj",
	operand="",
	ne=#object(
		a=#skyRepoCheckType(
			obj=#toObject(obj="@obj").toObject().toBracketNotationObject()
		),
		c=#if(
			operator=#owners(obj="@oldObj").debug().count(),
			operand="0",
			gt=#if(
				operator=#signatureSheet().intersect(b=#owners(obj="@oldObj")).count(),
				operand="0",
				eq=#if(
					operator=#owners(obj="@oldObj").count(),
					operand="0",
					eq=#error(code="401",msg="This object is public, nobody can own it."),
					ne=#error(code="401",msg="Only an owner of an object may change it.")
				)
			)
		).ccall(
			oldObj=#skyrepoGet(version="").debug()
		),
		z=#toObject(obj="@obj").toObject().toBracketNotationObject().httpPost(
			url=putUrl,
			contentType="application/json",
			multipart="false"
		)
	)
).object(z=#toObject(obj="@obj")).cget(z="");

#skyrepoPut=put;

deleteUrl=#add(
	a=urlBase,
	b="/data/",
	c="@type",
	d="/",
	g=#urlEncode(obj="@id"),
	z="?refresh=true"
);

//BUG: Check to see if there are no signature sheet signatures but the owners change, if it changes the owner.
delete=#object(
		b=#if(
			operator=#owners().count(obj="@oldObj"),
			operand="0",
			gt=#if(
				operator=#signatureSheet().intersect(b=#owners(obj="@oldObj")).count(),
				operand="0",
				eq=#if(
					operator=#owners(obj="@oldObj").count(),
					operand="0",
					eq=#error(code="403",msg="This object is public, nobody can delete it."),
					ne=#error(code="401",msg="Only an owner of an object may delete it.")
				)
			),
			eq=#error(code="403",msg="This object is public, nobody can delete it.")
		).ccall(
			oldObj=#skyrepoGet(version="")
		),
		z=#httpDelete(
			url=deleteUrl
		)
).cget(z="");

#skyrepoDelete=delete;

getUrl=#add(
	a=urlBase,
	b="/data/",
	c="@type",
	f="/",
	g=#urlEncode(obj="@id"),
	h=#if(
		operator="@version",
		operand="",
		ne=#add(
			a="?version=",
			b="@version",
			c="&version_type=external"
		)
	)
);

get=getUrl.httpGet().toObject().cgetByParam(
	param="_source"
).fromBracketNotationObject().filterResults();

#skyrepoGet=get;

mySignatureFilterArray = #signatureSheet().cforEach(
	paramName="signatureKey",
	op=#object(
		match=#object().put(
			_key=owner,
			_value=#object(
				query="@signatureKey",
				analyzer="whitespace_remove"
			)
		)
	),
	array="true"
);

ownershipFilterArray = #if(operator=#add(a="[",b="]").toArray().append(a="all", b="public").has(has="@ownership"), operand="true",
	eq=#toArray(obj="@ownershipArray").append(
		a=#object(
			missing=#object(
				field=owner
			)
		),
		b=#object(
			bool=#object(
				must_not=#skyRepoGetProtectedTypes().cforEach(
					paramName="protectedType",
					op=#object(
						match=#object().put(
							_key=#add(a="@",b="type.(full)"),
							_value="@protectedType"
						)
					),
					array="true"
				)
			)
		)
	),
	ne=#toArray(obj="@ownershipArray")
).ccall(
	ownershipArray=#if(
		operator=#add(a="[",b="]").toArray().append(a="all", b="owned", c="me").has(has="@ownership"), 
		operand="true",
		eq=mySignatureFilterArray.displayJson(_collapse="true"),
		ne=#add(a="[",b="]")
	)
);

ownershipMustObj = #if(operator="@ownership", operand="public",
	eq=#add(a="[",b="]").toArray().append(
		a=#object(
			missing=#object(
				field=owner
			)
		)
	),
	ne=#if(operator="@ownership", operand="owned",
		eq=#add(a="[",b="]").toArray().append(
			a=#object(
				exists=#object(
					field=owner
				)
			)
		),
	)
);

ownershipFilters = #if(
	operator=#add(a="[",b="]").append(a="public",b="owned").has(has="@ownership"),
	operand="true",
	eq=#decode(obj="@filterObj").put(
		_key="must",
		_value=ownershipMustObj
	),
	ne=#decode(obj="@filterObj"),
).ccall(
	filterObj=#object(
		should=ownershipFilterArray
	)
);

typeArray=#toArray(obj="@types").cforEach(
	paramName="type",
	op=#object(
		match=#object().put(
			_key=#add(a=type,b=".(full)"),
			_value="@type"
		)
	),
	array="true"
);

//#if(
//	operator="@types", 
//	operand="",
//	eq=typeArray
//)

//#skyRepoGetProtectedTypes
searchObj=#object(
	from=#if(operator="@start", operand="",
		eq="0",
		ne="@start"
	),
	size=#if(operator="@size", operand="",
		eq="50",
		ne="@size"
	),
	query=#object(
		filtered=#object(
			query=#object(
				query_string=#object(
					query="@q"
				)
			),
			filter=#object(
				bool=#if(operator="@types", operand="",
					eq=ownershipFilters,
					ne=#object(
						must=#add(a="[",b="]").toArray().append(
							a=#object(
								bool=ownershipFilters
							),
							b=#object(
								bool=#object(
									should=typeArray
								)
							)
						)
					)
				)
			)
		)
	)
).put(
	_key="_source",
	_value=#object(
		a=context,
		b=type,
		c=id,
		d=owner.add(z="*"),
		e=signature,
		f="name"
	).valueSet()
);

searchUrl=#add(
	a=urlBase,
	b="/_search"
);

search=searchObj.httpPost(url=searchUrl,multipart="false").toObject().cget(hits="").cget(hits="").cforEach(
	paramName="obj",
	array="true",
	op=#toObject(obj="@obj").getByParam(param="_source").fromBracketNotationObject()
).filterResults().displayJson(_collapse="true");

#skyrepoSearch=search;

typesObj = #object(
	query=#object(
		filtered=#object(
			query=#object(
				match_all=#object()
			),
			filter=#object(
				bool=#object(
					should=#signatureSheet().cforEach(
						paramName="signatureKey",
						op=#object(
							match=#object().put(
								_key=owner,
								_value=#object(
									query="@signatureKey",
									analyzer="whitespace_remove"
								)
							)
						),
						array="true"
					).append(
						a=#object(
							missing=#object(
								field=owner
							)
						),
						b=#object(
							bool=#object(
								must_not=#skyRepoGetProtectedTypes().cforEach(
									paramName="protectedType",
									op=#object(
										match=#object().put(
											_key=#add(a="@",b="type.(full)"),
											_value="@protectedType"
										)
									),
									array="true"
								)
							)
						)
					)	
				)
			)
		)
	),
	aggs=#object(
		types=#object(
			terms=#object(
				field=#add(a=type,b=".(full)")
			)
		)
	)
);

types = typesObj.httpPost(url=searchUrl, multipart="false").toObject().cget(aggregations="").cget(types="").cget(buckets="").displayJson(_collapse="true");

#skyrepoTypes = types;